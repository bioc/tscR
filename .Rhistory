detach("package:tscR", unload = TRUE)
detach("", unload = TRUE)
detach( unload = TRUE)
detach("package:ggplot2", unload = TRUE)
detach("package:purrr", unload = TRUE)
detach("package:tibble", unload = TRUE)
detach("package:tidyr", unload = TRUE)
detach("package:tidyverse", unload = TRUE)
library(tscR)
df <- data.frame(T1 = c(140,100,75,35), T2=c(120,120,50,48), T3 = c(100,140,35,70))
df1 <- matrix(NA, nrow=10, ncol=3)
df2 <- matrix(NA, nrow=10, ncol=3)
df3 <- matrix(NA, nrow=10, ncol=3)
df4 <- matrix(NA, nrow=10, ncol=3)
for(i in seq(1,10)){
df1[i,] <- jitter(as.numeric(df[1,]), factor = 1.5)
df2[i,] <- jitter(as.numeric(df[2,]), factor = 1.5)
df3[i,] <- jitter(as.numeric(df[3,]), factor = 1.5)
df4[i,] <- jitter(as.numeric(df[4,]), factor = 1.5)
}
df <- as.data.frame(rbind(df1,df2,df3,df4))
names(df) <- c("T1","T2","T3")
df <- as.data.frame.table(t(df))
df$Var3 <- rep(c("A","B","C","D"), each=30)
p1 <- df %>%
ggplot( aes_(~Var1, ~Freq, group=~Var2) ) +
geom_line() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
xlab("(A)") + ylab("") + ggtitle(label = "Raw trajectories")
library(ggplot2)
p1 <- df %>%
ggplot( aes_(~Var1, ~Freq, group=~Var2) ) +
geom_line() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
xlab("(A)") + ylab("") + ggtitle(label = "Raw trajectories")
p2 <- df %>%
mutate(Var4 = recode(Var3, "B" = "A")) %>%
mutate(Var4 = recode(Var4, "D" = "C")) %>%
ggplot( aes_(~Var1, ~Freq, group=~Var2, colour=~Var4) ) +
geom_line() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
xlab("(B)") + ylab("") + ggtitle(label = "Frechet based cluster")
p3 <- df %>%
mutate(Var4 = recode(Var3, "C" = "A")) %>%
mutate(Var4 = recode(Var4, "D" = "B")) %>%
ggplot( aes_(~Var1, ~Freq, group=~Var2, colour=~Var4) ) +
geom_line() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
xlab("(C)") + ylab("") + ggtitle(label = "Slope based cluster")
p4 <- df %>%
ggplot( aes_(~Var1, ~Freq, group=~Var2, colour=~Var3) ) +
geom_line() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
xlab("(D)") + ylab("") + ggtitle(label = "Combined clusters")
gridExtra::grid.arrange(p1,p2,p3,p4, nrow=2,
bottom = textGrob("Fig. 1",gp=gpar(fontsize=14,font=3)))
library(grid)
devtools::install_github("fpsanz/tscR")
data(tscR)
df <- tscR
head(df)
data(tscR)
df <- tscR
head(df)
matplot(t(df), type = "l", col = "gray30", lty = 1, ylab = "")
time <- c(1,2,3)
sDist <- slopeDist(df, time)
sclust <- getClusters(sDist, k = 3)
plotCluster(data = df, clust = sclust, ncluster = "all")
plotCluster(df, sclust, 1)
plotCluster(df, sclust, c(1,2))
fdist <- frechetDistC(df, time)
fclust <- getClusters(fdist, 3)
plotCluster(df, fclust, "all")
ccluster <- combineCluster(sclust, fclust)
plotCluster(df, ccluster, c(1:6))
plotCluster(df, ccluster, "all")
data( "tscR" )
bigDF <- tscR
senators <- imputeSenators( bigDF, k = 100 )
sdistSen <- slopeDist( senators$senatorData, time = c( 1, 2, 3 ) )
cSenators <- getClusters( sdistSen, k = 4 )
plotCluster(senators$senatorData, cSenators, "all")
plotCluster(senators$senatorData, cSenators, c(1,2,3,4))
endCluster <- imputeSenatorToData(senators, cSenators)
plotClusterSenator(endCluster, "all")
plotClusterSenator(endCluster, c(1,2,3,4))
detach("package:tscR", unload = TRUE)
devtools::build(vignettes = T)
devtools::build_vignettes()
devtools::build(vignettes = T)
install.packages("/media/fpsanz/datos/tscR_0.1.0.tar.gz", repos = NULL, type = "source")
library(tscR)
devtools::build(vignettes = T)
devtools::build(vignettes = T)
devtools::build(vignettes = T)
install.packages("/media/fpsanz/datos/tscR_0.1.0.tar.gz", repos = NULL, type = "source")
detach("package:tscR", unload = TRUE)
detach("package:tscR", unload = TRUE)
library(tscR)
detach("package:tscR", unload = TRUE)
library(tscR)
remove.packages("tscR")
install.packages("/media/fpsanz/datos/tscR_0.1.0.tar.gz", repos = NULL, type = "source")
detach("package:tscR", unload = TRUE)
remove.packages("tscR")
devtools::build(vignettes = T)
install.packages("/media/fpsanz/datos/tscR_0.1.0.tar.gz", repos = NULL, type = "source")
library(tscR)
install.packages("/media/fpsanz/datos/tscR_0.1.0.tar.gz", repos = NULL, type = "source")
library(tscR)
devtools::build(vignettes = T)
devtools::build_vignettes()
devtools::build(vignettes = T)
library(tscR)
detach("package:tscR", unload = TRUE)
library(tscR)
install.packages("/media/fpsanz/datos/tscR_0.1.0.tar.gz", repos = NULL, type = "source")
devtools::build_manual()
devtools::build_vignettes()
devtools::build()
install.packages("/media/fpsanz/datos/tscR_0.1.0.tar.gz", repos = NULL, type = "source")
library(tscR)
detach("tscR")
detach("package:tscR", unload = TRUE)
remove.packages("tscR")
install.packages("/media/fpsanz/datos/tscR_0.1.0.tar.gz", repos = NULL, type = "source")
devtools::build()
remove.packages("tscR")
install.packages("/media/fpsanz/datos/tscR_0.1.0.tar.gz", repos = NULL, type = "source")
devtools::build(vignettes = T)
library(tscR)
devtools::build(vignettes = T)
library(tscR)
library(tscR)
devtools::build(vignettes = T)
library(tscR)
devtools::build(vignettes = T)
library(tscR)
data( tscR )
data <- tscR
time <- c( 1, 2, 3 )
senators <- imputeSenators( data, k = 100 )
senatorDist <- slopeDist( senators$senatorsWide, time )
senatorDist <- slopeDist( senators$senatorData, time )
sClust <- getClusters( senatorDist, k = 5 )
endCluster <- imputeSenatorToData( senators, sClust )
plotClusterSenator( endCluster, "all" )
plotClusterSenator( endCluster, "all", col=1 )
plotClusterSenator( endCluster, "all", col="red" )
plotClusterSenator( endCluster, "all", lty=3 )
plotClusterSenator( endCluster, "all", lty=3 )
devtools::build(vignettes = T)
install.packages("/media/fpsanz/datos/tscR_0.1.0.tar.gz", repos = NULL, type = "source")
library(tscR)
data( tscR )
data <- tscR
time <- c( 1, 2, 3 )
senators <- imputeSenators( data, k = 100 )
senatorDist <- slopeDist( senators$senatorData, time )
sClust <- getClusters( senatorDist, k = 5 )
endCluster <- imputeSenatorToData( senators, sClust )
plotClusterSenator( endCluster, "all")
plotClusterSenator( endCluster, c(1:4))
devtools::
devtools::build_manual()
devtools::build(vignettes = T)
library(tscR)
library(tscR)
library(tscR)
devtools::build(vignettes = T)
devtools::build_vignettes()
detach("package:tscR", unload = TRUE)
library(tscR)
detach("package:tscR", unload = TRUE)
library(tscR)
detach("package:tscR", unload = TRUE)
devtools::build(vignettes = T)
devtools::build(vignettes = T)
devtools::build(vignettes = T)
remove.packages("tscR")
install.packages("/media/fpsanz/datos/tscR_0.1.0.tar.gz", repos = NULL, type = "source")
devtools::document()
devtools::build_manual()
devtools::build(vignettes = T)
remove.packages("tscR")
install.packages("/media/fpsanz/datos/tscR_0.1.0.tar.gz", repos = NULL, type = "source")
devtools::load_all(".")
library(tscR)
remove.packages("tscR")
devtools::build_vignettes()
devtools::build(vignettes = T)
install.packages("/media/fpsanz/datos/tscR_0.1.0.tar.gz", repos = NULL, type = "source")
browseVignettes("tscR")
devtools::build_vignettes()
devtools::build_vignettes()
detach("package:tidyverse", unload = TRUE)
detach("package:tscR", unload = TRUE)
library(tscR)
library(tidyverse)
detach("package:tidyverse", unload = TRUE)
devtools::build(vignettes = T)
search()
library(tscR)
search()
detach("package:tscR", unload = TRUE)
remove.packages("tscR")
devtools::build(vignettes = T)
install.packages("/media/fpsanz/datos/tscR_0.1.0.tar.gz", repos = NULL, type = "source")
library(tscR)
search()
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(tscR)
library(tidyverse)
library(grid)
# Chunk 3
df <- data.frame(T1 = c(140,100,75,35), T2=c(120,120,50,48), T3 = c(100,140,35,70))
df1 <- matrix(NA, nrow=10, ncol=3)
df2 <- matrix(NA, nrow=10, ncol=3)
df3 <- matrix(NA, nrow=10, ncol=3)
df4 <- matrix(NA, nrow=10, ncol=3)
for(i in seq(1,10)){
df1[i,] <- jitter(as.numeric(df[1,]), factor = 1.5)
df2[i,] <- jitter(as.numeric(df[2,]), factor = 1.5)
df3[i,] <- jitter(as.numeric(df[3,]), factor = 1.5)
df4[i,] <- jitter(as.numeric(df[4,]), factor = 1.5)
}
df <- as.data.frame(rbind(df1,df2,df3,df4))
names(df) <- c("T1","T2","T3")
df <- as.data.frame.table(t(df))
df$Var3 <- rep(c("A","B","C","D"), each=30)
p1 <- df %>%
ggplot( aes_(~Var1, ~Freq, group=~Var2) ) +
geom_line() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
xlab("(A)") + ylab("") + ggtitle(label = "Raw trajectories")
p2 <- df %>%
mutate(Var4 = recode(Var3, "B" = "A")) %>%
mutate(Var4 = recode(Var4, "D" = "C")) %>%
ggplot( aes_(~Var1, ~Freq, group=~Var2, colour=~Var4) ) +
geom_line() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
xlab("(B)") + ylab("") + ggtitle(label = "Frechet based cluster")
p3 <- df %>%
mutate(Var4 = recode(Var3, "C" = "A")) %>%
mutate(Var4 = recode(Var4, "D" = "B")) %>%
ggplot( aes_(~Var1, ~Freq, group=~Var2, colour=~Var4) ) +
geom_line() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
xlab("(C)") + ylab("") + ggtitle(label = "Slope based cluster")
p4 <- df %>%
ggplot( aes_(~Var1, ~Freq, group=~Var2, colour=~Var3) ) +
geom_line() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
xlab("(D)") + ylab("") + ggtitle(label = "Combined clusters")
gridExtra::grid.arrange(p1,p2,p3,p4, nrow=2,
bottom = textGrob("Fig. 1",gp=gpar(fontsize=14,font=3)))
# Chunk 5
library(tscR)
# Chunk 7
data(tscR)
df <- tscR
head(df)
# Chunk 8
matplot(t(df), type = "l", col = "gray30", lty = 1, ylab = "")
# Chunk 9
time <- c(1,2,3)
sDist <- slopeDist(df, time)
# Chunk 10
sclust <- getClusters(sDist, k = 3)
# Chunk 11
plotCluster(data = df, clust = sclust, ncluster = "all")
# Chunk 12
plotCluster(df, sclust, 1)
# Chunk 13
plotCluster(df, sclust, c(1,2))
# Chunk 14
fdist <- frechetDistC(df, time)
fclust <- getClusters(fdist, 3)
plotCluster(df, fclust, "all")
# Chunk 15
ccluster <- combineCluster(sclust, fclust)
plotCluster(df, ccluster, c(1:6))
plotCluster(df, ccluster, "all")
# Chunk 16
data( "tscR" )
bigDF <- tscR
senators <- imputeSenators( bigDF, k = 100 )
sdistSen <- slopeDist( senators$senatorData, time = c( 1, 2, 3 ) )
cSenators <- getClusters( sdistSen, k = 4 )
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(tscR)
library(tidyverse)
library(grid)
# Chunk 3
df <- data.frame(T1 = c(140,100,75,35), T2=c(120,120,50,48), T3 = c(100,140,35,70))
df1 <- matrix(NA, nrow=10, ncol=3)
df2 <- matrix(NA, nrow=10, ncol=3)
df3 <- matrix(NA, nrow=10, ncol=3)
df4 <- matrix(NA, nrow=10, ncol=3)
for(i in seq(1,10)){
df1[i,] <- jitter(as.numeric(df[1,]), factor = 1.5)
df2[i,] <- jitter(as.numeric(df[2,]), factor = 1.5)
df3[i,] <- jitter(as.numeric(df[3,]), factor = 1.5)
df4[i,] <- jitter(as.numeric(df[4,]), factor = 1.5)
}
df <- as.data.frame(rbind(df1,df2,df3,df4))
names(df) <- c("T1","T2","T3")
df <- as.data.frame.table(t(df))
df$Var3 <- rep(c("A","B","C","D"), each=30)
p1 <- df %>%
ggplot( aes_(~Var1, ~Freq, group=~Var2) ) +
geom_line() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
xlab("(A)") + ylab("") + ggtitle(label = "Raw trajectories")
p2 <- df %>%
mutate(Var4 = recode(Var3, "B" = "A")) %>%
mutate(Var4 = recode(Var4, "D" = "C")) %>%
ggplot( aes_(~Var1, ~Freq, group=~Var2, colour=~Var4) ) +
geom_line() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
xlab("(B)") + ylab("") + ggtitle(label = "Frechet based cluster")
p3 <- df %>%
mutate(Var4 = recode(Var3, "C" = "A")) %>%
mutate(Var4 = recode(Var4, "D" = "B")) %>%
ggplot( aes_(~Var1, ~Freq, group=~Var2, colour=~Var4) ) +
geom_line() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
xlab("(C)") + ylab("") + ggtitle(label = "Slope based cluster")
p4 <- df %>%
ggplot( aes_(~Var1, ~Freq, group=~Var2, colour=~Var3) ) +
geom_line() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
xlab("(D)") + ylab("") + ggtitle(label = "Combined clusters")
gridExtra::grid.arrange(p1,p2,p3,p4, nrow=2,
bottom = textGrob("Fig. 1",gp=gpar(fontsize=14,font=3)))
# Chunk 5
library(tscR)
# Chunk 7
data(tscR)
df <- tscR
head(df)
# Chunk 8
matplot(t(df), type = "l", col = "gray30", lty = 1, ylab = "")
# Chunk 9
time <- c(1,2,3)
sDist <- slopeDist(df, time)
# Chunk 10
sclust <- getClusters(sDist, k = 3)
# Chunk 11
plotCluster(data = df, clust = sclust, ncluster = "all")
# Chunk 12
plotCluster(df, sclust, 1)
# Chunk 13
plotCluster(df, sclust, c(1,2))
# Chunk 14
fdist <- frechetDistC(df, time)
fclust <- getClusters(fdist, 3)
plotCluster(df, fclust, "all")
# Chunk 15
ccluster <- combineCluster(sclust, fclust)
plotCluster(df, ccluster, c(1:6))
plotCluster(df, ccluster, "all")
data( "tscR" )
bigDF <- tscR
senators <- imputeSenators( bigDF, k = 100 )
sdistSen <- frechetDistC( senators$senatorData, time = c( 1, 2, 3 ) )
cSenators <- getClusters( sdistSen, k = 4 )
plotCluster(senators$senatorData, cSenators, "all")
plotCluster(senators$senatorData, cSenators, c(1,2,3,4))
endCluster <- imputeSenatorToData(senators, cSenators)
plotClusterSenator(endCluster, "all")
plotClusterSenator(endCluster, c(1,2,3,4))
plotClusterSenator(endCluster, "all")
devtools::build_vignettes()
detach("package:tscR", unload = TRUE)
library(tscR)
detach("package:tscR", unload = TRUE)
devtools::build_vignettes()
devtools::build(vignettes = T)
install.packages("/media/fpsanz/datos/tscR_0.1.0.tar.gz", repos = NULL, type = "source")
library(tscR)
